{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitya\\\\Documents\\\\GitHub\\\\csc648-03-sp20-team102\\\\application\\\\team102\\\\UI\\\\src\\\\Component\\\\Scan.js\";\nimport React, { Component, useState } from 'react';\nimport MediaHandler from './MediaHandler';\nimport { Button } from 'reactstrap';\nimport axios from 'axios';\nconst gatewayUrl = process.env.gatewayUrl || 'http://localhost:3004';\nexport default class Scan extends Component {\n  constructor() {\n    super();\n\n    this.captureImage = () => {\n      console.log('inside captureImage function');\n      const context = this.canvas.getContext('2d');\n      context.drawImage(this.myVideo, 0, 0, 400, 350);\n      const image = this.canvas.toDataURL('image/jpeg', 0.5);\n      this.setState({\n        imageString: image\n      });\n      return image;\n    };\n\n    this.processImage = () => {\n      console.log('inside processImage function');\n      const url = 'http://localhost:3010/api/image/save';\n      const img = this.state.imageString;\n\n      if (img != \"\") {\n        let formData = new FormData();\n        formData.set('file', img);\n        axios.post(url, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(res => {\n          console.log(res.data);\n          this.setState({\n            rawData: res.data\n          });\n          processData();\n        }).catch(e => {\n          console.log(e);\n        });\n      }\n    };\n\n    this.processData = () => {\n      const processedData = [];\n      let newItem = {\n        description: \"\",\n        quantity: 0\n      };\n      this.state.rawData.forEach(item => {\n        if (processedData.length > 0) {\n          processedData.forEach(part => {\n            if (part.description == item.description) {\n              part.quantity += 1;\n            } else {\n              newItem.description = item;\n              newItem.quantity += 1;\n              processedData.push(newItem);\n            }\n          });\n        } else {\n          newItem.description = item;\n          newItem.quantity += 1;\n          processedData.push(newItem);\n        }\n      });\n      console.log(processedData);\n    };\n\n    this.state = {\n      hasMedia: false,\n      imageString: \"\",\n      rawData: []\n    };\n    this.mediaHandler = new MediaHandler();\n  }\n\n  componentDidMount() {\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({\n        hasMedia: true\n      });\n\n      try {\n        this.myVideo.srcObject = stream;\n      } catch (e) {\n        this.myVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.myVideo.play();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"video-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      className: \"video\",\n      width: \"400\",\n      height: \"350\",\n      ref: ref => {\n        this.myVideo = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Button, {\n      id: \"capture\",\n      onClick: this.captureImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Capture\"), React.createElement(Button, {\n      id: \"process\",\n      onClick: this.processImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Process\"), React.createElement(\"div\", {\n      className: \"image-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: canvas => {\n        this.canvas = canvas;\n      },\n      width: \"400\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mitya/Documents/GitHub/csc648-03-sp20-team102/application/team102/UI/src/Component/Scan.js"],"names":["React","Component","useState","MediaHandler","Button","axios","gatewayUrl","process","env","Scan","constructor","captureImage","console","log","context","canvas","getContext","drawImage","myVideo","image","toDataURL","setState","imageString","processImage","url","img","state","formData","FormData","set","post","headers","then","res","data","rawData","processData","catch","e","processedData","newItem","description","quantity","forEach","item","length","part","push","hasMedia","mediaHandler","componentDidMount","getPermissions","stream","srcObject","src","URL","createObjectURL","play","render","ref"],"mappings":"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","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport MediaHandler from './MediaHandler';\r\nimport { Button } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nconst gatewayUrl = process.env.gatewayUrl || 'http://localhost:3004';\r\n\r\nexport default class Scan extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hasMedia: false,\r\n            imageString: \"\",\r\n            rawData: []\r\n        };\r\n\r\n        this.mediaHandler = new MediaHandler();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mediaHandler.getPermissions()\r\n        .then( (stream) => {\r\n            this.setState({hasMedia : true});\r\n\r\n            try {\r\n                this.myVideo.srcObject = stream;\r\n            } catch (e) {\r\n                this.myVideo.src = URL.createObjectURL(stream);\r\n            }\r\n            this.myVideo.play();\r\n        })\r\n    }\r\n\r\n    captureImage = () => {\r\n\r\n        console.log('inside captureImage function')\r\n        const context = this.canvas.getContext('2d');\r\n        context.drawImage(this.myVideo, 0, 0, 400, 350);\r\n        const image = this.canvas.toDataURL('image/jpeg', 0.5);\r\n        this.setState({imageString : image});\r\n        return image;\r\n    }\r\n\r\n    processImage = () => {\r\n\r\n     \r\n\r\n        console.log('inside processImage function')\r\n\r\n        const url = 'http://localhost:3010/api/image/save';\r\n\r\n        const img = this.state.imageString;\r\n\r\n        if(img != \"\"){\r\n\r\n            let formData = new FormData();\r\n            formData.set('file', img);\r\n\r\n\r\n            axios.post(url, formData, {\r\n                headers: {'Content-Type' : 'multipart/form-data' }\r\n            }).then((res) => {\r\n                console.log(res.data);\r\n                this.setState({rawData : res.data});\r\n                processData();\r\n            }).catch((e) =>{\r\n                console.log(e)\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    processData = () => {\r\n        const processedData = [];\r\n        let newItem = { description : \"\", quantity : 0};\r\n        this.state.rawData.forEach((item) => {\r\n            if(processedData.length > 0) {\r\n                processedData.forEach((part) => {\r\n                    if(part.description == item.description){\r\n                        part.quantity += 1;\r\n                    } else {\r\n                        newItem.description = item;\r\n                        newItem.quantity += 1;\r\n                        processedData.push(newItem);\r\n                    }\r\n                })\r\n            } else {\r\n                newItem.description = item;\r\n                newItem.quantity += 1;\r\n                processedData.push(newItem);\r\n            }\r\n        });\r\n        console.log(processedData);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"video-container\">\r\n                    <video className=\"video\" width=\"400\" height=\"350\" ref={(ref) => {this.myVideo = ref;}}></video>\r\n                </div>\r\n                <Button id=\"capture\" onClick={this.captureImage}>Capture</Button>\r\n                <Button id=\"process\"onClick={this.processImage} >Process</Button>\r\n                <div className=\"image-container\">\r\n                    <canvas ref={ (canvas) => {this.canvas = canvas}} width='400' height= '350' ></canvas>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}