{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antwong\\\\Documents\\\\temp\\\\csc648-03-sp20-team102\\\\application\\\\team102\\\\UI\\\\src\\\\Component\\\\create-fooddata.component.js\";\nimport React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from \"axios\"; //import Navi from \"./Navigation\";\n//import TopBar from \"./TopBar\";\n\nimport { NavLink, FormGroup, Label, Form, Input, Button } from \"reactstrap\";\nexport default class Create extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n    this.onChangeFoodname = this.onChangeFoodname.bind(this);\n    this.onChangeExpirationdate = this.onChangeExpirationdate.bind(this);\n    this.onChangeCalories = this.onChangeCalories.bind(this);\n    this.onChangeCarbs = this.onChangeCarbs.bind(this);\n    this.onChangeNumberOfItems = this.onChangeNumberOfItems.bind(this);\n    this.onChangeSugar = this.onChangeSugar.bind(this);\n    this.onChangeFat = this.onChangeFat.bind(this);\n    this.onChangeProtein = this.onChangeProtein.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      foodname: \"\",\n      expirationdate: new Date(),\n      calories: \"\",\n      numberOfItems: \"\",\n      carbs: \"\",\n      sugar: \"\",\n      fat: \"\",\n      protein: \"\",\n      sodium: \"\",\n      foods: [],\n      userdata: [],\n      password: params.password,\n      username: params.id\n    };\n  } // change activations for prop states\n\n\n  onChangeFoodname(e) {\n    this.setState({\n      foodname: e.target.value\n    });\n  }\n\n  onChangeExpirationdate(e) {\n    this.setState({\n      expirationdate: e.target.value\n    });\n  }\n\n  onChangeCalories(e) {\n    this.setState({\n      calories: e.target.value\n    });\n  }\n\n  onChangeNumberOfItems(e) {\n    this.setState({\n      numberOfItems: e.target.value\n    });\n  }\n\n  onChangeCarbs(e) {\n    this.setState({\n      carbs: e.target.value\n    });\n  }\n\n  onChangeSugar(e) {\n    this.setState({\n      sugar: e.target.value\n    });\n  }\n\n  onChangeFat(e) {\n    this.setState({\n      fat: e.target.value\n    });\n  }\n\n  onChangeProtein(e) {\n    this.setState({\n      protein: e.target.value\n    });\n  }\n\n  onChangeSodium(e) {\n    this.setState({\n      sodium: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    axios\n    /* Searches food name param in Api returns all types matching\r\n     * foods -> array going to be loaded with first result info\r\n     * has all nutrition facts\r\n     */\n    .get(\"https://api.nal.usda.gov/fdc/v1/foods/search?api_key=ldLF1ky8NkwmcLnTDvqDoSjul1eanGZ1o6vZ2Q9u&query=\" + this.state.foodname).then(response => {\n      console.log(response.data.foods[0].foodNutrients[0]);\n      this.setState({\n        foods: response.data.foods[0].foodNutrients\n      });\n      /* Searches array for matching nutrient name, only exact \r\n       * calls funct to change value once found\r\n       */\n\n      this.state.foods.map(currentfood => {\n        console.log(currentfood.nutrientName, currentfood.value);\n\n        if (currentfood.nutrientName === 'Energy') {\n          this.onChangeCalories(currentfood.value);\n        } else if (currentfood.nutrientName === 'Carbohydrate, by difference') {\n          this.onChangeCarbs(currentfood.value);\n        } else if (currentfood.nutrientName === 'Total lipid (fat)') {\n          this.onChangeFat(currentfood.value);\n        } else if (currentfood.nutrientName === 'Protein') {\n          this.onChangeProtein(currentfood.value);\n        } else if (currentfood.nutrientName === 'Sugars, total including NLEA') {\n          this.onChangeSugar(currentfood.value);\n        } else if (currentfood.nutrientName === 'Sodium, Na') {\n          this.onChangeSodium(currentfood.value);\n        }\n      });\n      /* adds all values into a temp list\r\n       * sends to backend to be added to personal id food list\r\n       */\n\n      const food = {\n        foodName: this.state.foodname,\n        expirationDate: this.state.expirationdate,\n        calories: this.state.calories,\n        numOfItems: this.state.numberOfItems,\n        carbs: this.state.carbs,\n        protein: this.state.protein,\n        fat: this.state.fat,\n        sugar: this.state.sugar,\n        sodium: this.state.sodium\n      };\n      console.log(food);\n      axios.post(\"/fooddata/add\", food).then(res => console.log(res.data));\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    var inv = \"/inventory/\" + this.state.username + \"/\" + this.state.password;\n    return React.createElement(Form, {\n      inline: true,\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Create New Food Items\"), React.createElement(NavLink, {\n      href: inv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Back\"), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"foodName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Food Name:\"), React.createElement(Input, {\n      type: \"text\",\n      required: true,\n      placeholder: \"Food Name?\",\n      value: this.state.foodname,\n      onChange: this.onChangeFoodname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"ExpDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Exp. Date:\"), React.createElement(DatePicker, {\n      required: true,\n      selected: this.state.expirationdate,\n      onChange: this.onChangeExpirationdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"qty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Quantity:\"), React.createElement(Input, {\n      type: \"select\",\n      value: this.state.numberOfItems,\n      onChange: this.onChangeNumberOfItems,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"1\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"6\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"7\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"9\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"10\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"11\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"12\"))), React.createElement(Button, {\n      size: \"lg\",\n      className: \"SignSpace form-control input\",\n      type: \"submit\",\n      value: \"Create food\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Antwong/Documents/temp/csc648-03-sp20-team102/application/team102/UI/src/Component/create-fooddata.component.js"],"names":["React","Component","DatePicker","axios","NavLink","FormGroup","Label","Form","Input","Button","Create","constructor","props","match","params","onChangeFoodname","bind","onChangeExpirationdate","onChangeCalories","onChangeCarbs","onChangeNumberOfItems","onChangeSugar","onChangeFat","onChangeProtein","onSubmit","state","foodname","expirationdate","Date","calories","numberOfItems","carbs","sugar","fat","protein","sodium","foods","userdata","password","username","id","e","setState","target","value","onChangeSodium","preventDefault","get","then","response","console","log","data","foodNutrients","map","currentfood","nutrientName","food","foodName","expirationDate","numOfItems","post","res","catch","error","render","inv"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport axios from \"axios\";\r\n//import Navi from \"./Navigation\";\r\n//import TopBar from \"./TopBar\";\r\nimport { NavLink, FormGroup, Label, Form, Input, Button } from \"reactstrap\";\r\n\r\nexport default class Create extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { match: { params } } = this.props;\r\n    this.onChangeFoodname = this.onChangeFoodname.bind(this);\r\n    this.onChangeExpirationdate = this.onChangeExpirationdate.bind(this);\r\n    this.onChangeCalories = this.onChangeCalories.bind(this);\r\n    this.onChangeCarbs = this.onChangeCarbs.bind(this);\r\n    this.onChangeNumberOfItems = this.onChangeNumberOfItems.bind(this);\r\n    this.onChangeSugar = this.onChangeSugar.bind(this);\r\n    this.onChangeFat = this.onChangeFat.bind(this);\r\n    this.onChangeProtein = this.onChangeProtein.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.state = {\r\n      foodname: \"\",\r\n      expirationdate: new Date(),\r\n      calories: \"\",\r\n      numberOfItems: \"\",\r\n      carbs: \"\",\r\n      sugar: \"\",\r\n      fat: \"\",\r\n      protein: \"\",\r\n      sodium: \"\",\r\n      foods: [],\r\n      userdata: [],\r\n      password: params.password,\r\n      username: params.id\r\n    };\r\n  }\r\n  // change activations for prop states\r\n  onChangeFoodname(e) { this.setState({ foodname: e.target.value }); }\r\n  onChangeExpirationdate(e) { this.setState({ expirationdate: e.target.value }); }\r\n  onChangeCalories(e) { this.setState({ calories: e.target.value }); }\r\n  onChangeNumberOfItems(e) { this.setState({ numberOfItems: e.target.value }); }\r\n  onChangeCarbs(e) { this.setState({ carbs: e.target.value }); }\r\n  onChangeSugar(e) { this.setState({ sugar: e.target.value }); }\r\n  onChangeFat(e) { this.setState({ fat: e.target.value }); }\r\n  onChangeProtein(e) { this.setState({ protein: e.target.value }); }\r\n  onChangeSodium(e) { this.setState({ sodium: e.target.value }); }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    axios\r\n      /* Searches food name param in Api returns all types matching\r\n       * foods -> array going to be loaded with first result info\r\n       * has all nutrition facts\r\n       */\r\n      .get(\"https://api.nal.usda.gov/fdc/v1/foods/search?api_key=ldLF1ky8NkwmcLnTDvqDoSjul1eanGZ1o6vZ2Q9u&query=\" + this.state.foodname)\r\n      .then(response => {\r\n        console.log(response.data.foods[0].foodNutrients[0]);\r\n        this.setState({\r\n          foods: response.data.foods[0].foodNutrients\r\n        });\r\n        /* Searches array for matching nutrient name, only exact \r\n         * calls funct to change value once found\r\n         */\r\n        this.state.foods.map(currentfood => {\r\n          console.log(currentfood.nutrientName, currentfood.value);\r\n          if (currentfood.nutrientName === 'Energy') {\r\n            this.onChangeCalories(currentfood.value);\r\n          } else if (currentfood.nutrientName === 'Carbohydrate, by difference') {\r\n            this.onChangeCarbs(currentfood.value);\r\n          } else if (currentfood.nutrientName === 'Total lipid (fat)') {\r\n            this.onChangeFat(currentfood.value);\r\n          } else if (currentfood.nutrientName === 'Protein') {\r\n            this.onChangeProtein(currentfood.value);\r\n          } else if (currentfood.nutrientName === 'Sugars, total including NLEA') {\r\n            this.onChangeSugar(currentfood.value);\r\n          } else if (currentfood.nutrientName === 'Sodium, Na') {\r\n            this.onChangeSodium(currentfood.value);\r\n          }\r\n        })\r\n        /* adds all values into a temp list\r\n         * sends to backend to be added to personal id food list\r\n         */\r\n        const food = {\r\n          foodName: this.state.foodname,\r\n          expirationDate: this.state.expirationdate,\r\n          calories: this.state.calories,\r\n          numOfItems: this.state.numberOfItems,\r\n          carbs: this.state.carbs,\r\n          protein: this.state.protein,\r\n          fat: this.state.fat,\r\n          sugar: this.state.sugar,\r\n          sodium: this.state.sodium\r\n        };\r\n        console.log(food);\r\n        axios\r\n          .post(\"/fooddata/add\", food)\r\n          .then(res => console.log(res.data));\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    var inv = \"/inventory/\" + this.state.username + \"/\" + this.state.password\r\n    return (\r\n      <Form inline onSubmit={this.onSubmit}>\r\n        <h3>Create New Food Items</h3>\r\n        <NavLink href={inv}>Back</NavLink>\r\n        <FormGroup>\r\n          <Label for=\"foodName\">Food Name:</Label>\r\n          <Input\r\n            type=\"text\"\r\n            required\r\n            placeholder=\"Food Name?\"\r\n            value={this.state.foodname}\r\n            onChange={this.onChangeFoodname} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"ExpDate\">Exp. Date:</Label>\r\n          <DatePicker\r\n            required\r\n            selected={this.state.expirationdate}\r\n            onChange={this.onChangeExpirationdate} />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label for=\"qty\">Quantity:</Label>\r\n          <Input\r\n            type=\"select\"\r\n            value={this.state.numberOfItems}\r\n            onChange={this.onChangeNumberOfItems}>\r\n            <option>1</option>\r\n            <option>2</option>\r\n            <option>3</option>\r\n            <option>3</option>\r\n            <option>5</option>\r\n            <option>6</option>\r\n            <option>7</option>\r\n            <option>8</option>\r\n            <option>9</option>\r\n            <option>10</option>\r\n            <option>11</option>\r\n            <option>12</option>\r\n          </Input>\r\n        </FormGroup>\r\n        <Button size='lg' className=\"SignSpace form-control input\" type=\"submit\" value=\"Create food\">\r\n          Submit\r\n          </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}