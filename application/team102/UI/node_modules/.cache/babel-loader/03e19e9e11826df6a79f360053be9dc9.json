{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mitya\\\\Documents\\\\GitHub\\\\csc648-03-sp20-team102\\\\application\\\\team102\\\\UI\\\\src\\\\Component\\\\Scan.js\";\nimport React, { Component, useState } from 'react';\nimport MediaHandler from './MediaHandler';\nimport { Button } from 'reactstrap';\nimport axios from 'axios';\nconst gatewayUrl = process.env.gatewayUrl || 'http://localhost:3004';\nexport default class Scan extends Component {\n  constructor() {\n    super();\n\n    this.captureImage = () => {\n      console.log('inside captureImage function');\n      const context = this.canvas.getContext('2d');\n      context.drawImage(this.myVideo, 0, 0, 400, 350);\n      const image = this.canvas.toDataURL('image/jpeg', 0.5).then(this.setState({\n        imageString: image\n      }));\n      return image;\n    };\n\n    this.processImage = img => {\n      if (img != \"\") {\n        console.log('inside processImage function');\n        const url = 'http://localhost:3010/api/image/save';\n        let formData = new FormData();\n        formData.set('file', img);\n        axios.post(url, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n      }\n    };\n\n    this.state = {\n      hasMedia: false,\n      imageString: \"\"\n    };\n    this.mediaHandler = new MediaHandler();\n  }\n\n  componentDidMount() {\n    this.mediaHandler.getPermissions().then(stream => {\n      this.setState({\n        hasMedia: true\n      });\n\n      try {\n        this.myVideo.srcObject = stream;\n      } catch (e) {\n        this.myVideo.src = URL.createObjectURL(stream);\n      }\n\n      this.myVideo.play();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"video-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      className: \"video\",\n      width: \"400\",\n      height: \"350\",\n      ref: ref => {\n        this.myVideo = ref;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: this.captureImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Capture\"), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Process\"), React.createElement(\"div\", {\n      className: \"image-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: canvas => {\n        this.canvas = canvas;\n      },\n      width: \"400\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mitya/Documents/GitHub/csc648-03-sp20-team102/application/team102/UI/src/Component/Scan.js"],"names":["React","Component","useState","MediaHandler","Button","axios","gatewayUrl","process","env","Scan","constructor","captureImage","console","log","context","canvas","getContext","drawImage","myVideo","image","toDataURL","then","setState","imageString","processImage","img","url","formData","FormData","set","post","headers","state","hasMedia","mediaHandler","componentDidMount","getPermissions","stream","srcObject","e","src","URL","createObjectURL","play","render","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYF,UAAZ,IAA0B,uBAA7C;AAEA,eAAe,MAAMG,IAAN,SAAmBR,SAAnB,CAA6B;AAExCS,EAAAA,WAAW,GAAG;AACV;;AADU,SAyBdC,YAzBc,GAyBC,MAAM;AAEjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,YAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,UAAZ,CAAuB,IAAvB,CAAhB;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkB,KAAKC,OAAvB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,GAAtC,EAA2C,GAA3C;AACA,YAAMC,KAAK,GAAG,KAAKJ,MAAL,CAAYK,SAAZ,CAAsB,YAAtB,EAAoC,GAApC,EACbC,IADa,CACR,KAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAGJ;AAAf,OAAd,CADQ,CAAd;AAEA,aAAOA,KAAP;AACH,KAjCa;;AAAA,SAmCdK,YAnCc,GAmCEC,GAAD,IAAS;AAEpB,UAAGA,GAAG,IAAI,EAAV,EAAa;AAETb,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAEA,cAAMa,GAAG,GAAG,sCAAZ;AAEA,YAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,QAAAA,QAAQ,CAACE,GAAT,CAAa,MAAb,EAAqBJ,GAArB;AAGApB,QAAAA,KAAK,CAACyB,IAAN,CAAWJ,GAAX,EAAgBC,QAAhB,EAA0B;AACtBI,UAAAA,OAAO,EAAE;AAAC,4BAAiB;AAAlB;AADa,SAA1B;AAGH;AAEJ,KApDa;;AAGV,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KADD;AAETV,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAKA,SAAKW,YAAL,GAAoB,IAAI/B,YAAJ,EAApB;AACH;;AAEDgC,EAAAA,iBAAiB,GAAG;AAChB,SAAKD,YAAL,CAAkBE,cAAlB,GACCf,IADD,CACQgB,MAAD,IAAY;AACf,WAAKf,QAAL,CAAc;AAACW,QAAAA,QAAQ,EAAG;AAAZ,OAAd;;AAEA,UAAI;AACA,aAAKf,OAAL,CAAaoB,SAAb,GAAyBD,MAAzB;AACH,OAFD,CAEE,OAAOE,CAAP,EAAU;AACR,aAAKrB,OAAL,CAAasB,GAAb,GAAmBC,GAAG,CAACC,eAAJ,CAAoBL,MAApB,CAAnB;AACH;;AACD,WAAKnB,OAAL,CAAayB,IAAb;AACH,KAVD;AAWH;;AA8BDC,EAAAA,MAAM,GAAG;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAyB,MAAA,KAAK,EAAC,KAA/B;AAAqC,MAAA,MAAM,EAAC,KAA5C;AAAkD,MAAA,GAAG,EAAGC,GAAD,IAAS;AAAC,aAAK3B,OAAL,GAAe2B,GAAf;AAAoB,OAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKlC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EAMI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,GAAG,EAAII,MAAD,IAAY;AAAC,aAAKA,MAAL,GAAcA,MAAd;AAAqB,OAAhD;AAAkD,MAAA,KAAK,EAAC,KAAxD;AAA8D,MAAA,MAAM,EAAE,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CADJ;AAYH;;AArEuC","sourcesContent":["import React, {Component, useState} from 'react';\r\nimport MediaHandler from './MediaHandler';\r\nimport { Button } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\nconst gatewayUrl = process.env.gatewayUrl || 'http://localhost:3004';\r\n\r\nexport default class Scan extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hasMedia: false,\r\n            imageString: \"\"\r\n        };\r\n\r\n        this.mediaHandler = new MediaHandler();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mediaHandler.getPermissions()\r\n        .then( (stream) => {\r\n            this.setState({hasMedia : true});\r\n\r\n            try {\r\n                this.myVideo.srcObject = stream;\r\n            } catch (e) {\r\n                this.myVideo.src = URL.createObjectURL(stream);\r\n            }\r\n            this.myVideo.play();\r\n        })\r\n    }\r\n\r\n    captureImage = () => {\r\n\r\n        console.log('inside captureImage function')\r\n        const context = this.canvas.getContext('2d');\r\n        context.drawImage(this.myVideo, 0, 0, 400, 350);\r\n        const image = this.canvas.toDataURL('image/jpeg', 0.5)\r\n        .then(this.setState({imageString : image}));\r\n        return image;\r\n    }\r\n\r\n    processImage = (img) => {\r\n\r\n        if(img != \"\"){\r\n\r\n            console.log('inside processImage function')\r\n\r\n            const url = 'http://localhost:3010/api/image/save';\r\n\r\n            let formData = new FormData();\r\n            formData.set('file', img);\r\n\r\n\r\n            axios.post(url, formData, {\r\n                headers: {'Content-Type' : 'multipart/form-data' }\r\n            });\r\n        }\r\n\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"video-container\">\r\n                    <video className=\"video\" width=\"400\" height=\"350\" ref={(ref) => {this.myVideo = ref;}}></video>\r\n                </div>\r\n                <Button onClick={this.captureImage}>Capture</Button>\r\n                <Button >Process</Button>\r\n                <div className=\"image-container\">\r\n                    <canvas ref={ (canvas) => {this.canvas = canvas}} width='400' height= '350' ></canvas>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}